name: Build and Release Android APK

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  security-events: write

jobs:
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Flutter 3.24.0
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Verify the installation
      run: flutter doctor -v
      
    - name: Run Flutter analyzer
      run: flutter analyze --no-fatal-infos
      continue-on-error: true
      
    - name: Run tests
      run: flutter test --coverage --reporter=expanded
      continue-on-error: true

  build:
    name: Build APK
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 17
      id: setup-java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Flutter 3.24.0
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Clean and get dependencies
      run: |
        echo "Cleaning previous builds..."
        flutter clean
        rm -rf .dart_tool
        rm -rf build
        echo "Getting dependencies..."
        flutter pub get
        echo "Dependencies installed successfully"
        
    - name: Build APK
      run: |
        echo "Building APK..."
        flutter build apk --release \
          --dart-define=flutter.inspector.structuredErrors=false
        echo "APK built successfully"
      env:
        GRADLE_OPTS: -Xmx4g -XX:+UseG1GC -XX:MaxMetaspaceSize=1g
        _JAVA_OPTIONS: -Xmx4g -XX:+UseG1GC -XX:MaxMetaspaceSize=1g
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: speed-drawer-apk
        path: build/app/outputs/flutter-apk/app-release.apk
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download APK
      uses: actions/download-artifact@v4
      with:
        name: speed-drawer-apk
        path: ./
        
    - name: Get version
      id: version
      run: |
        VERSION="v1.0.$(date +%Y%m%d%H%M%S)"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"
      
    - name: Create Release with gh CLI
      run: |
        gh release create ${{ steps.version.outputs.version }} \
          --title "Speed Drawer ${{ steps.version.outputs.version }}" \
          --notes "## Speed Drawer ${{ steps.version.outputs.version }}

        High-performance custom app drawer focused on speed and productivity.

        ### Features
        - ‚ö° Instant search with keyboard auto-focus
        - üîç Fuzzy search with partial matching
        - ‚ù§Ô∏è Favorite apps management
        - üé® Customizable themes and icon sizes
        - üì± Optimized for performance
        - üè† Can replace default launcher

        ### Installation
        1. Download the APK file below
        2. Enable \"Install from unknown sources\" in Android settings
        3. Install the APK
        4. Set as default launcher (optional)

        ### Requirements
        - Android 6.0 (API level 23) or higher" \
          --draft=false \
          --prerelease=false \
          ./app-release.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 